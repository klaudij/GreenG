{
  "version": 3,
  "sources": ["browser-external:http", "../../is-docker/index.js", "../../is-wsl/index.js", "../../open/index.js", "../../@google-cloud/local-auth/node_modules/arrify/index.js", "../../server-destroy/index.js", "../../@google-cloud/local-auth/src/index.ts"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"http\" has been externalized for browser compatibility. Cannot access \"http.${key}\" in client code.`)\n    }\n  }\n}))", "'use strict';\nconst fs = require('fs');\n\nlet isDocker;\n\nfunction hasDockerEnv() {\n\ttry {\n\t\tfs.statSync('/.dockerenv');\n\t\treturn true;\n\t} catch (_) {\n\t\treturn false;\n\t}\n}\n\nfunction hasDockerCGroup() {\n\ttry {\n\t\treturn fs.readFileSync('/proc/self/cgroup', 'utf8').includes('docker');\n\t} catch (_) {\n\t\treturn false;\n\t}\n}\n\nmodule.exports = () => {\n\tif (isDocker === undefined) {\n\t\tisDocker = hasDockerEnv() || hasDockerCGroup();\n\t}\n\n\treturn isDocker;\n};\n", "'use strict';\nconst os = require('os');\nconst fs = require('fs');\nconst isDocker = require('is-docker');\n\nconst isWsl = () => {\n\tif (process.platform !== 'linux') {\n\t\treturn false;\n\t}\n\n\tif (os.release().toLowerCase().includes('microsoft')) {\n\t\tif (isDocker()) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\ttry {\n\t\treturn fs.readFileSync('/proc/version', 'utf8').toLowerCase().includes('microsoft') ?\n\t\t\t!isDocker() : false;\n\t} catch (_) {\n\t\treturn false;\n\t}\n};\n\nif (process.env.__IS_WSL_TEST__) {\n\tmodule.exports = isWsl;\n} else {\n\tmodule.exports = isWsl();\n}\n", "'use strict';\nconst {promisify} = require('util');\nconst path = require('path');\nconst childProcess = require('child_process');\nconst fs = require('fs');\nconst isWsl = require('is-wsl');\nconst isDocker = require('is-docker');\n\nconst pAccess = promisify(fs.access);\nconst pReadFile = promisify(fs.readFile);\n\n// Path to included `xdg-open`.\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\n\n/**\nGet the mount point for fixed drives in WSL.\n\n@inner\n@returns {string} The mount point.\n*/\nconst getWslDrivesMountPoint = (() => {\n\t// Default value for \"root\" param\n\t// according to https://docs.microsoft.com/en-us/windows/wsl/wsl-config\n\tconst defaultMountPoint = '/mnt/';\n\n\tlet mountPoint;\n\n\treturn async function () {\n\t\tif (mountPoint) {\n\t\t\t// Return memoized mount point value\n\t\t\treturn mountPoint;\n\t\t}\n\n\t\tconst configFilePath = '/etc/wsl.conf';\n\n\t\tlet isConfigFileExists = false;\n\t\ttry {\n\t\t\tawait pAccess(configFilePath, fs.constants.F_OK);\n\t\t\tisConfigFileExists = true;\n\t\t} catch (_) {}\n\n\t\tif (!isConfigFileExists) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tconst configContent = await pReadFile(configFilePath, {encoding: 'utf8'});\n\t\tconst configMountPoint = /root\\s*=\\s*(.*)/g.exec(configContent);\n\n\t\tif (!configMountPoint) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tmountPoint = configMountPoint[1].trim();\n\t\tmountPoint = mountPoint.endsWith('/') ? mountPoint : mountPoint + '/';\n\n\t\treturn mountPoint;\n\t};\n})();\n\nmodule.exports = async (target, options) => {\n\tif (typeof target !== 'string') {\n\t\tthrow new TypeError('Expected a `target`');\n\t}\n\n\toptions = {\n\t\twait: false,\n\t\tbackground: false,\n\t\tallowNonzeroExitCode: false,\n\t\t...options\n\t};\n\n\tlet command;\n\tlet {app} = options;\n\tlet appArguments = [];\n\tconst cliArguments = [];\n\tconst childProcessOptions = {};\n\n\tif (Array.isArray(app)) {\n\t\tappArguments = app.slice(1);\n\t\tapp = app[0];\n\t}\n\n\tif (process.platform === 'darwin') {\n\t\tcommand = 'open';\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('--wait-apps');\n\t\t}\n\n\t\tif (options.background) {\n\t\t\tcliArguments.push('--background');\n\t\t}\n\n\t\tif (app) {\n\t\t\tcliArguments.push('-a', app);\n\t\t}\n\t} else if (process.platform === 'win32' || (isWsl && !isDocker())) {\n\t\tconst mountPoint = await getWslDrivesMountPoint();\n\n\t\tcommand = isWsl ?\n\t\t\t`${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` :\n\t\t\t`${process.env.SYSTEMROOT}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`;\n\n\t\tcliArguments.push(\n\t\t\t'-NoProfile',\n\t\t\t'-NonInteractive',\n\t\t\t'\u2013ExecutionPolicy',\n\t\t\t'Bypass',\n\t\t\t'-EncodedCommand'\n\t\t);\n\n\t\tif (!isWsl) {\n\t\t\tchildProcessOptions.windowsVerbatimArguments = true;\n\t\t}\n\n\t\tconst encodedArguments = ['Start'];\n\n\t\tif (options.wait) {\n\t\t\tencodedArguments.push('-Wait');\n\t\t}\n\n\t\tif (app) {\n\t\t\t// Double quote with double quotes to ensure the inner quotes are passed through.\n\t\t\t// Inner quotes are delimited for PowerShell interpretation with backticks.\n\t\t\tencodedArguments.push(`\"\\`\"${app}\\`\"\"`, '-ArgumentList');\n\t\t\tappArguments.unshift(target);\n\t\t} else {\n\t\t\tencodedArguments.push(`\"${target}\"`);\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tappArguments = appArguments.map(arg => `\"\\`\"${arg}\\`\"\"`);\n\t\t\tencodedArguments.push(appArguments.join(','));\n\t\t}\n\n\t\t// Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n\t\ttarget = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\n\t} else {\n\t\tif (app) {\n\t\t\tcommand = app;\n\t\t} else {\n\t\t\t// When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n\t\t\tconst isBundled = !__dirname || __dirname === '/';\n\n\t\t\t// Check if local `xdg-open` exists and is executable.\n\t\t\tlet exeLocalXdgOpen = false;\n\t\t\ttry {\n\t\t\t\tawait pAccess(localXdgOpenPath, fs.constants.X_OK);\n\t\t\t\texeLocalXdgOpen = true;\n\t\t\t} catch (_) {}\n\n\t\t\tconst useSystemXdgOpen = process.versions.electron ||\n\t\t\t\tprocess.platform === 'android' || isBundled || !exeLocalXdgOpen;\n\t\t\tcommand = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\n\t\tif (!options.wait) {\n\t\t\t// `xdg-open` will block the process unless stdio is ignored\n\t\t\t// and it's detached from the parent even if it's unref'd.\n\t\t\tchildProcessOptions.stdio = 'ignore';\n\t\t\tchildProcessOptions.detached = true;\n\t\t}\n\t}\n\n\tcliArguments.push(target);\n\n\tif (process.platform === 'darwin' && appArguments.length > 0) {\n\t\tcliArguments.push('--args', ...appArguments);\n\t}\n\n\tconst subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n\tif (options.wait) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsubprocess.once('error', reject);\n\n\t\t\tsubprocess.once('close', exitCode => {\n\t\t\t\tif (options.allowNonzeroExitCode && exitCode > 0) {\n\t\t\t\t\treject(new Error(`Exited with code ${exitCode}`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(subprocess);\n\t\t\t});\n\t\t});\n\t}\n\n\tsubprocess.unref();\n\n\treturn subprocess;\n};\n", "'use strict';\n\nconst arrify = value => {\n\tif (value === null || value === undefined) {\n\t\treturn [];\n\t}\n\n\tif (Array.isArray(value)) {\n\t\treturn value;\n\t}\n\n\tif (typeof value === 'string') {\n\t\treturn [value];\n\t}\n\n\tif (typeof value[Symbol.iterator] === 'function') {\n\t\treturn [...value];\n\t}\n\n\treturn [value];\n};\n\nmodule.exports = arrify;\n", "module.exports = enableDestroy;\n\nfunction enableDestroy(server) {\n  var connections = {}\n\n  server.on('connection', function(conn) {\n    var key = conn.remoteAddress + ':' + conn.remotePort;\n    connections[key] = conn;\n    conn.on('close', function() {\n      delete connections[key];\n    });\n  });\n\n  server.destroy = function(cb) {\n    server.close(cb);\n    for (var key in connections)\n      connections[key].destroy();\n  };\n}\n", null],
  "mappings": "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",
  "names": []
}
